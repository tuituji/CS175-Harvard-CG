!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCBALL_H	arcball.h	2;"	d
ASSTCOMMON_H	asstcommon.h	2;"	d
BASE	Makefile	/^BASE = asst4$/;"	m
CPPFLAGS	Makefile	/^  CPPFLAGS = -I\/home\/l\/i\/lib175\/usr\/glew\/include$/;"	m
CS175_EPS	cvec.h	/^static const double CS175_EPS = 1e-8;$/;"	v
CS175_EPS2	cvec.h	/^static const double CS175_EPS2 = CS175_EPS * CS175_EPS;$/;"	v
CS175_EPS3	cvec.h	/^static const double CS175_EPS3 = CS175_EPS * CS175_EPS * CS175_EPS;$/;"	v
CS175_PI	cvec.h	/^static const double CS175_PI = 3.14159265358979323846264338327950288;$/;"	v
CXX	Makefile	/^CXX = g++ $/;"	m
Cvec	cvec.h	/^  Cvec() {$/;"	f	class:Cvec
Cvec	cvec.h	/^  Cvec(const T& t) {$/;"	f	class:Cvec
Cvec	cvec.h	/^  Cvec(const T& t0, const T& t1) {$/;"	f	class:Cvec
Cvec	cvec.h	/^  Cvec(const T& t0, const T& t1, const T& t2) {$/;"	f	class:Cvec
Cvec	cvec.h	/^  Cvec(const T& t0, const T& t1, const T& t2, const T& t3) {$/;"	f	class:Cvec
Cvec	cvec.h	/^  explicit Cvec(const Cvec<T, m>& v, const T& extendValue = T(0)) {$/;"	f	class:Cvec
Cvec	cvec.h	/^class Cvec {$/;"	c
Cvec2	cvec.h	/^typedef Cvec <double, 2> Cvec2;$/;"	t
Cvec2f	cvec.h	/^typedef Cvec <float, 2> Cvec2f;$/;"	t
Cvec2ub	cvec.h	/^typedef Cvec <unsigned char, 2> Cvec2ub;$/;"	t
Cvec3	cvec.h	/^typedef Cvec <double, 3> Cvec3;$/;"	t
Cvec3f	cvec.h	/^typedef Cvec <float, 3> Cvec3f;$/;"	t
Cvec3ub	cvec.h	/^typedef Cvec <unsigned char, 3> Cvec3ub;$/;"	t
Cvec4	cvec.h	/^typedef Cvec <double, 4> Cvec4;$/;"	t
Cvec4f	cvec.h	/^typedef Cvec <float, 4> Cvec4f;$/;"	t
Cvec4ub	cvec.h	/^typedef Cvec <unsigned char, 4> Cvec4ub;$/;"	t
DEFV	geometrymaker.h	106;"	d
DEFV	geometrymaker.h	59;"	d
DRAWER_H	drawer.h	2;"	d
Drawer	drawer.h	/^  Drawer(const RigTForm& initialRbt, const ShaderState& curSS)$/;"	f	class:Drawer
Drawer	drawer.h	/^class Drawer : public SgNodeVisitor {$/;"	c
FIELD_OFFSET	asst4.cpp	120;"	d	file:
GEOMETRYMAKER_H	geometrymaker.h	2;"	d
GLSUPPORT_H	glsupport.h	2;"	d
GenericVertex	geometrymaker.h	/^  GenericVertex($/;"	f	struct:GenericVertex
GenericVertex	geometrymaker.h	/^struct GenericVertex {$/;"	s
Geometry	asst4-snippets.cpp	/^class Geometry {$/;"	c	file:
Geometry	asst4.cpp	/^  Geometry(VertexPN *vtx, unsigned short *idx, int vboLen, int iboLen) {$/;"	f	struct:Geometry
Geometry	asst4.cpp	/^struct Geometry {$/;"	s	file:
GlBufferObject	glsupport.h	/^  GlBufferObject() {$/;"	f	class:GlBufferObject
GlBufferObject	glsupport.h	/^class GlBufferObject : Noncopyable {$/;"	c
GlProgram	glsupport.h	/^  GlProgram() {$/;"	f	class:GlProgram
GlProgram	glsupport.h	/^class GlProgram : Noncopyable {$/;"	c
GlShader	glsupport.h	/^  GlShader(GLenum shaderType) {$/;"	f	class:GlShader
GlShader	glsupport.h	/^class GlShader : Noncopyable {$/;"	c
GlTexture	glsupport.h	/^  GlTexture() {$/;"	f	class:GlTexture
GlTexture	glsupport.h	/^class GlTexture : Noncopyable {$/;"	c
IdToRbtNodeMap	picker.h	/^  typedef std::map<int, std::tr1::shared_ptr<SgRbtNode> > IdToRbtNodeMap;$/;"	t	class:Picker
MASK	picker.cpp	/^static const int NBITS = 4, N = 1 << NBITS, MASK = N-1;$/;"	v	file:
MATRIX4_H	matrix4.h	2;"	d
Matrix4	matrix4.h	/^  Matrix4() {$/;"	f	class:Matrix4
Matrix4	matrix4.h	/^  Matrix4(const double a) {$/;"	f	class:Matrix4
Matrix4	matrix4.h	/^class Matrix4 {$/;"	c
MyShapeNode	asst4-snippets.cpp	/^typedef SgGeometryShapeNode<Geometry> MyShapeNode;$/;"	t	file:
N	picker.cpp	/^static const int NBITS = 4, N = 1 << NBITS, MASK = N-1;$/;"	v	file:
NBITS	picker.cpp	/^static const int NBITS = 4, N = 1 << NBITS, MASK = N-1;$/;"	v	file:
Noncopyable	glsupport.h	/^  Noncopyable() {}$/;"	f	class:Noncopyable
Noncopyable	glsupport.h	/^class Noncopyable {$/;"	c
OBJ	Makefile	/^OBJ = $(BASE).o ppm.o glsupport.o scenegraph.o picker.o$/;"	m
OS	Makefile	/^OS := $(shell uname -s)$/;"	m
PICKER_H	picker.h	2;"	d
PICKING_SHADER	asst4-snippets.cpp	/^static const int PICKING_SHADER = 2; \/\/ index of the picking shader is g_shaerFiles$/;"	v	file:
PPM_H	ppm.h	2;"	d
PackedPixel	ppm.h	/^struct PackedPixel {$/;"	s
Picker	picker.cpp	/^Picker::Picker(const RigTForm& initialRbt, const ShaderState& curSS)$/;"	f	class:Picker
Picker	picker.h	/^class Picker : public SgNodeVisitor {$/;"	c
QUAT_H	quat.h	2;"	d
Quat	quat.h	/^  Quat() : q_(1,0,0,0) {}$/;"	f	class:Quat
Quat	quat.h	/^  Quat(const double w, const Cvec3& v) : q_(w, v[0], v[1], v[2]) {}$/;"	f	class:Quat
Quat	quat.h	/^  Quat(const double w, const double x, const double y, const double z) : q_(w, x,y,z) {}$/;"	f	class:Quat
Quat	quat.h	/^class Quat {$/;"	c
RIGTFORM_H	rigtform.h	2;"	d
RbtAccumVisitor	scenegraph.cpp	/^  RbtAccumVisitor(SgTransformNode& target)$/;"	f	class:RbtAccumVisitor
RbtAccumVisitor	scenegraph.cpp	/^class RbtAccumVisitor : public SgNodeVisitor {$/;"	c	file:
RigTForm	rigtform.h	/^  RigTForm() : t_(0) {$/;"	f	class:RigTForm
RigTForm	rigtform.h	/^  RigTForm(const Cvec3& t, const Quat& r) {$/;"	f	class:RigTForm
RigTForm	rigtform.h	/^  explicit RigTForm(const Cvec3& t) {$/;"	f	class:RigTForm
RigTForm	rigtform.h	/^  explicit RigTForm(const Quat& r) {$/;"	f	class:RigTForm
RigTForm	rigtform.h	/^class RigTForm {$/;"	c
SCENEGRAPH_H	scenegraph.h	2;"	d
SgGeometryShapeNode	scenegraph.h	/^  SgGeometryShapeNode(std::tr1::shared_ptr<Geometry> geometry,$/;"	f	class:SgGeometryShapeNode
SgGeometryShapeNode	scenegraph.h	/^class SgGeometryShapeNode : public SgShapeNode {$/;"	c
SgNode	scenegraph.h	/^  SgNode() {}$/;"	f	class:SgNode
SgNode	scenegraph.h	/^class SgNode : public std::tr1::enable_shared_from_this<SgNode>, Noncopyable {$/;"	c
SgNodeVisitor	scenegraph.h	/^class SgNodeVisitor {$/;"	c
SgRbtNode	scenegraph.h	/^  SgRbtNode(const RigTForm& rbt = RigTForm())$/;"	f	class:SgRbtNode
SgRbtNode	scenegraph.h	/^class SgRbtNode : public SgTransformNode {$/;"	c
SgRootNode	scenegraph.h	/^  SgRootNode() {}$/;"	f	class:SgRootNode
SgRootNode	scenegraph.h	/^class SgRootNode : public SgTransformNode {$/;"	c
SgShapeNode	scenegraph.h	/^class SgShapeNode : public SgNode {$/;"	c
SgTransformNode	scenegraph.h	/^class SgTransformNode : public SgNode {$/;"	c
ShaderState	asst4.cpp	/^  ShaderState(const char* vsfn, const char* fsfn) {$/;"	f	struct:ShaderState
ShaderState	asst4.cpp	/^struct ShaderState {$/;"	s	file:
ShaderState	asstcommon.h	/^  ShaderState(const char* vsfn, const char* fsfn) {$/;"	f	struct:ShaderState
ShaderState	asstcommon.h	/^struct ShaderState {$/;"	s
VEC_H	cvec.h	2;"	d
VertexPN	asst4.cpp	/^  VertexPN() {}$/;"	f	struct:VertexPN
VertexPN	asst4.cpp	/^  VertexPN(const GenericVertex& v) {$/;"	f	struct:VertexPN
VertexPN	asst4.cpp	/^  VertexPN(float x, float y, float z,$/;"	f	struct:VertexPN
VertexPN	asst4.cpp	/^struct VertexPN {$/;"	s	file:
accept	scenegraph.cpp	/^bool SgShapeNode::accept(SgNodeVisitor& visitor) {$/;"	f	class:SgShapeNode
accept	scenegraph.cpp	/^bool SgTransformNode::accept(SgNodeVisitor& visitor) {$/;"	f	class:SgTransformNode
addChild	scenegraph.cpp	/^void SgTransformNode::addChild(shared_ptr<SgNode> child) {$/;"	f	class:SgTransformNode
addToMap	picker.cpp	/^void Picker::addToMap(int id, shared_ptr<SgRbtNode> node) {$/;"	f	class:Picker
affineMatrix_	scenegraph.h	/^  Matrix4 affineMatrix_;$/;"	m	class:SgGeometryShapeNode
b	ppm.h	/^  unsigned char r,g,b;$/;"	m	struct:PackedPixel
binormal	geometrymaker.h	/^  Cvec3f tangent, binormal;$/;"	m	struct:GenericVertex
checkGlErrors	glsupport.cpp	/^void checkGlErrors() {$/;"	f
children_	scenegraph.h	/^  std::vector<std::tr1::shared_ptr<SgNode> > children_;$/;"	m	class:SgTransformNode
colorToId	picker.cpp	/^int Picker::colorToId(const PackedPixel& p) {$/;"	f	class:Picker
color_	scenegraph.h	/^  Cvec3 color_;$/;"	m	class:SgGeometryShapeNode
compileShader	glsupport.cpp	/^static void compileShader(GLuint shaderHandle, int sourceLength, const char *source, const char *filenameHint) {$/;"	f	file:
constructRobot	asst4-snippets.cpp	/^static void constructRobot(shared_ptr<SgTransformNode> base, const Cvec3& color) {$/;"	f	file:
cross	cvec.h	/^inline Cvec<T,3> cross(const Cvec<T,3>& a, const Cvec<T,3>& b) {$/;"	f
curSS_	drawer.h	/^  const ShaderState& curSS_;$/;"	m	class:Drawer
d_	cvec.h	/^  T d_[n];$/;"	m	class:Cvec
d_	matrix4.h	/^  double d_[16]; \/\/ layout is row-major$/;"	m	class:Matrix4
display	asst4.cpp	/^static void display() {$/;"	f	file:
dot	cvec.h	/^inline T dot(const Cvec<T,n>& a, const Cvec<T,n>& b) {$/;"	f
dot	quat.h	/^inline double dot(const Quat& q, const Quat& p) {$/;"	f
draw	asst4.cpp	/^  void draw(const ShaderState& curSS) {$/;"	f	struct:Geometry
draw	scenegraph.h	/^  virtual void draw(const ShaderState& curSS) {$/;"	f	class:SgGeometryShapeNode
drawStuff	asst4.cpp	/^static void drawStuff() {$/;"	f	file:
drawer_	picker.h	/^  Drawer drawer_;$/;"	m	class:Picker
find	picker.cpp	/^shared_ptr<SgRbtNode> Picker::find(int id) {$/;"	f	class:Picker
found_	scenegraph.cpp	/^  bool found_;$/;"	m	class:RbtAccumVisitor	file:
g	ppm.h	/^  unsigned char r,g,b;$/;"	m	struct:PackedPixel
g_Gl2Compatible	asst4-snippets.cpp	/^ const bool g_Gl2Compatible = false;$/;"	v
g_Gl2Compatible	asst4.cpp	/^static const bool g_Gl2Compatible = false;$/;"	v	file:
g_activeShader	asst4.cpp	/^static int g_activeShader = 0;$/;"	v	file:
g_cube	asst4.cpp	/^static shared_ptr<Geometry> g_ground, g_cube;$/;"	v	file:
g_currentPickedRbtNode	asst4-snippets.cpp	/^static shared_ptr<SgRbtNode> g_currentPickedRbtNode; \/\/ used later when you do picking$/;"	v	file:
g_frustFar	asst4.cpp	/^static const float g_frustFar = -50.0;    \/\/ far plane$/;"	v	file:
g_frustFovY	asst4.cpp	/^static float g_frustFovY = g_frustMinFov; \/\/ FOV in y direction (updated by updateFrustFovY)$/;"	v	file:
g_frustMinFov	asst4.cpp	/^static const float g_frustMinFov = 60.0;  \/\/ A minimal of 60 degree field of view$/;"	v	file:
g_frustNear	asst4.cpp	/^static const float g_frustNear = -0.1;    \/\/ near plane$/;"	v	file:
g_ground	asst4.cpp	/^static shared_ptr<Geometry> g_ground, g_cube;$/;"	v	file:
g_groundNode	asst4-snippets.cpp	/^static shared_ptr<SgRbtNode> g_skyNode, g_groundNode, g_robot1Node, g_robot2Node;$/;"	v	file:
g_groundSize	asst4.cpp	/^static const float g_groundSize = 10.0;   \/\/ half the ground length$/;"	v	file:
g_groundY	asst4.cpp	/^static const float g_groundY = -2.0;      \/\/ y coordinate of the ground$/;"	v	file:
g_mouseClickDown	asst4.cpp	/^static bool g_mouseClickDown = false;    \/\/ is the mouse button pressed$/;"	v	file:
g_mouseClickX	asst4.cpp	/^static int g_mouseClickX, g_mouseClickY; \/\/ coordinates for mouse click event$/;"	v	file:
g_mouseClickY	asst4.cpp	/^static int g_mouseClickX, g_mouseClickY; \/\/ coordinates for mouse click event$/;"	v	file:
g_mouseLClickButton	asst4.cpp	/^static bool g_mouseLClickButton, g_mouseRClickButton, g_mouseMClickButton;$/;"	v	file:
g_mouseMClickButton	asst4.cpp	/^static bool g_mouseLClickButton, g_mouseRClickButton, g_mouseMClickButton;$/;"	v	file:
g_mouseRClickButton	asst4.cpp	/^static bool g_mouseLClickButton, g_mouseRClickButton, g_mouseMClickButton;$/;"	v	file:
g_numShaders	asst4-snippets.cpp	/^static const int g_numShaders = 3; \/\/ 3 shaders instead of 2$/;"	v	file:
g_numShaders	asst4.cpp	/^static const int g_numShaders = 2;$/;"	v	file:
g_objectColors	asst4.cpp	/^static Cvec3f g_objectColors[1] = {Cvec3f(1, 0, 0)};$/;"	v	file:
g_objectRbt	asst4.cpp	/^static Matrix4 g_objectRbt[1] = {Matrix4::makeTranslation(Cvec3(0,0,0))};  \/\/ currently only 1 obj is defined$/;"	v	file:
g_robot1Node	asst4-snippets.cpp	/^static shared_ptr<SgRbtNode> g_skyNode, g_groundNode, g_robot1Node, g_robot2Node;$/;"	v	file:
g_robot2Node	asst4-snippets.cpp	/^static shared_ptr<SgRbtNode> g_skyNode, g_groundNode, g_robot1Node, g_robot2Node;$/;"	v	file:
g_shaderFiles	asst4-snippets.cpp	/^static const char * const g_shaderFiles[g_numShaders][2] = {$/;"	v	file:
g_shaderFiles	asst4.cpp	/^static const char * const g_shaderFiles[g_numShaders][2] = {$/;"	v	file:
g_shaderFilesGl2	asst4-snippets.cpp	/^static const char * const g_shaderFilesGl2[g_numShaders][2] = {$/;"	v	file:
g_shaderFilesGl2	asst4.cpp	/^static const char * const g_shaderFilesGl2[g_numShaders][2] = {$/;"	v	file:
g_shaderStates	asst4.cpp	/^static vector<shared_ptr<ShaderState> > g_shaderStates; \/\/ our global shader states$/;"	v	file:
g_skyNode	asst4-snippets.cpp	/^static shared_ptr<SgRbtNode> g_skyNode, g_groundNode, g_robot1Node, g_robot2Node;$/;"	v	file:
g_skyRbt	asst4.cpp	/^static Matrix4 g_skyRbt = Matrix4::makeTranslation(Cvec3(0.0, 0.25, 4.0));$/;"	v	file:
g_windowHeight	asst4.cpp	/^static int g_windowHeight = 512;$/;"	v	file:
g_windowWidth	asst4.cpp	/^static int g_windowWidth = 512;$/;"	v	file:
g_world	asst4-snippets.cpp	/^static shared_ptr<SgRootNode> g_world;$/;"	v	file:
geometry_	scenegraph.h	/^  std::tr1::shared_ptr<Geometry> geometry_;$/;"	m	class:SgGeometryShapeNode
getAccumulatedRbt	scenegraph.cpp	/^  const RigTForm getAccumulatedRbt(int offsetFromStackTop = 0) {$/;"	f	class:RbtAccumVisitor
getAffineMatrix	scenegraph.h	/^  virtual Matrix4 getAffineMatrix() {$/;"	f	class:SgGeometryShapeNode
getChild	scenegraph.h	/^  std::tr1::shared_ptr<SgNode> getChild(int i) {$/;"	f	class:SgTransformNode
getCubeVbIbLen	geometrymaker.h	/^inline void getCubeVbIbLen(int& vbLen, int& ibLen) {$/;"	f
getCurSS	drawer.h	/^  const ShaderState& getCurSS() const {$/;"	f	class:Drawer
getNumChildren	scenegraph.h	/^  int getNumChildren() const {$/;"	f	class:SgTransformNode
getPathAccumRbt	scenegraph.cpp	/^RigTForm getPathAccumRbt($/;"	f
getPlaneVbIbLen	geometrymaker.h	/^inline void getPlaneVbIbLen(int& vbLen, int& ibLen) {$/;"	f
getRbt	scenegraph.h	/^  virtual RigTForm getRbt() {$/;"	f	class:SgRbtNode
getRbt	scenegraph.h	/^  virtual RigTForm getRbt() {$/;"	f	class:SgRootNode
getRbtNodeAtXY	picker.cpp	/^shared_ptr<SgRbtNode> Picker::getRbtNodeAtXY(int x, int y) {$/;"	f	class:Picker
getRotation	rigtform.h	/^  Quat getRotation() const {$/;"	f	class:RigTForm
getScreenSpaceCoord	arcball.h	/^inline Cvec2 getScreenSpaceCoord(const Cvec3& p,$/;"	f
getScreenToEyeScale	arcball.h	/^inline double getScreenToEyeScale(double z, double frustFovY, int screenHeight) {$/;"	f
getSphereVbIbLen	geometrymaker.h	/^inline void getSphereVbIbLen(int slices, int stacks, int& vbLen, int& ibLen) {$/;"	f
getTranslation	rigtform.h	/^  Cvec3 getTranslation() const {$/;"	f	class:RigTForm
h_aNormal	asst4.cpp	/^  GLint h_aNormal;$/;"	m	struct:ShaderState	file:
h_aNormal	asstcommon.h	/^  GLint h_aNormal;$/;"	m	struct:ShaderState
h_aPosition	asst4.cpp	/^  GLint h_aPosition;$/;"	m	struct:ShaderState	file:
h_aPosition	asstcommon.h	/^  GLint h_aPosition;$/;"	m	struct:ShaderState
h_uColor	asst4.cpp	/^  GLint h_uColor;$/;"	m	struct:ShaderState	file:
h_uColor	asstcommon.h	/^  GLint h_uColor;$/;"	m	struct:ShaderState
h_uIdColor	asstcommon.h	/^  GLint h_uIdColor;$/;"	m	struct:ShaderState
h_uLight	asst4.cpp	/^  GLint h_uLight, h_uLight2;$/;"	m	struct:ShaderState	file:
h_uLight	asstcommon.h	/^  GLint h_uLight, h_uLight2;$/;"	m	struct:ShaderState
h_uLight2	asst4.cpp	/^  GLint h_uLight, h_uLight2;$/;"	m	struct:ShaderState	file:
h_uLight2	asstcommon.h	/^  GLint h_uLight, h_uLight2;$/;"	m	struct:ShaderState
h_uModelViewMatrix	asst4.cpp	/^  GLint h_uModelViewMatrix;$/;"	m	struct:ShaderState	file:
h_uModelViewMatrix	asstcommon.h	/^  GLint h_uModelViewMatrix;$/;"	m	struct:ShaderState
h_uNormalMatrix	asst4.cpp	/^  GLint h_uNormalMatrix;$/;"	m	struct:ShaderState	file:
h_uNormalMatrix	asstcommon.h	/^  GLint h_uNormalMatrix;$/;"	m	struct:ShaderState
h_uProjMatrix	asst4.cpp	/^  GLint h_uProjMatrix;$/;"	m	struct:ShaderState	file:
h_uProjMatrix	asstcommon.h	/^  GLint h_uProjMatrix;$/;"	m	struct:ShaderState
handle_	glsupport.h	/^  GLuint handle_;$/;"	m	class:GlBufferObject
handle_	glsupport.h	/^  GLuint handle_;$/;"	m	class:GlProgram
handle_	glsupport.h	/^  GLuint handle_;$/;"	m	class:GlShader
handle_	glsupport.h	/^  GLuint handle_;$/;"	m	class:GlTexture
ibo	asst4.cpp	/^  GlBufferObject vbo, ibo;$/;"	m	struct:Geometry	file:
iboLen	asst4.cpp	/^  int vboLen, iboLen;$/;"	m	struct:Geometry	file:
idCounter_	picker.h	/^  int idCounter_;$/;"	m	class:Picker
idToColor	picker.cpp	/^Cvec3 Picker::idToColor(int id) {$/;"	f	class:Picker
idToRbtNode_	picker.h	/^  IdToRbtNodeMap idToRbtNode_;$/;"	m	class:Picker
initCubes	asst4.cpp	/^static void initCubes() {$/;"	f	file:
initGLState	asst4.cpp	/^static void initGLState() {$/;"	f	file:
initGeometry	asst4.cpp	/^static void initGeometry() {$/;"	f	file:
initGlutState	asst4.cpp	/^static void initGlutState(int argc, char * argv[]) {$/;"	f	file:
initGround	asst4.cpp	/^static void initGround() {$/;"	f	file:
initScene	asst4-snippets.cpp	/^static void initScene() {$/;"	f	file:
initShaders	asst4.cpp	/^static void initShaders() {$/;"	f	file:
inv	matrix4.h	/^inline Matrix4 inv(const Matrix4& m) {$/;"	f
inv	quat.h	/^inline Quat inv(const Quat& q) {$/;"	f
inv	rigtform.h	/^inline RigTForm inv(const RigTForm& tform) {$/;"	f
isAffine	matrix4.h	/^inline bool isAffine(const Matrix4& m) {$/;"	f
keyboard	asst4.cpp	/^static void keyboard(const unsigned char key, const int x, const int y) {$/;"	f	file:
linFact	matrix4.h	/^inline Matrix4 linFact(const Matrix4& m) {$/;"	f
linFact	rigtform.h	/^inline RigTForm linFact(const RigTForm& tform) {$/;"	f
linkShader	glsupport.cpp	/^void linkShader(GLuint programHandle, GLuint vs, GLuint fs) {$/;"	f
main	asst4.cpp	/^int main(int argc, char * argv[]) {$/;"	f
makeCube	geometrymaker.h	/^void makeCube(float size, VtxOutIter vtxIter, IdxOutIter idxIter) {$/;"	f
makePlane	geometrymaker.h	/^void makePlane(float size, VtxOutIter vtxIter, IdxOutIter idxIter) {$/;"	f
makeProjection	matrix4.h	/^  static Matrix4 makeProjection($/;"	f	class:Matrix4
makeProjection	matrix4.h	/^  static Matrix4 makeProjection(const double fovy, const double aspectRatio, const double zNear, const double zFar) {$/;"	f	class:Matrix4
makeProjectionMatrix	asst4.cpp	/^static Matrix4 makeProjectionMatrix() {$/;"	f	file:
makeScale	matrix4.h	/^  static Matrix4 makeScale(const Cvec3& s) {$/;"	f	class:Matrix4
makeSphere	geometrymaker.h	/^void makeSphere(float radius, int slices, int stacks, VtxOutIter vtxIter, IdxOutIter idxIter) {$/;"	f
makeTranslation	matrix4.h	/^  static Matrix4 makeTranslation(const Cvec3& t) {$/;"	f	class:Matrix4
makeXRotation	matrix4.h	/^  static Matrix4 makeXRotation(const double ang) {$/;"	f	class:Matrix4
makeXRotation	matrix4.h	/^  static Matrix4 makeXRotation(const double c, const double s) {$/;"	f	class:Matrix4
makeXRotation	quat.h	/^  static Quat makeXRotation(const double ang) {$/;"	f	class:Quat
makeYRotation	matrix4.h	/^  static Matrix4 makeYRotation(const double ang) {$/;"	f	class:Matrix4
makeYRotation	matrix4.h	/^  static Matrix4 makeYRotation(const double c, const double s) {$/;"	f	class:Matrix4
makeYRotation	quat.h	/^  static Quat makeYRotation(const double ang) {$/;"	f	class:Quat
makeZRotation	matrix4.h	/^  static Matrix4 makeZRotation(const double ang) {$/;"	f	class:Matrix4
makeZRotation	matrix4.h	/^  static Matrix4 makeZRotation(const double c, const double s) {$/;"	f	class:Matrix4
makeZRotation	quat.h	/^  static Quat makeZRotation(const double ang) {$/;"	f	class:Quat
motion	asst4.cpp	/^static void motion(const int x, const int y) {$/;"	f	file:
mouse	asst4.cpp	/^static void mouse(const int button, const int state, const int x, const int y) {$/;"	f	file:
n	asst4.cpp	/^  Cvec3f p, n;$/;"	m	struct:VertexPN	file:
nodeStack_	picker.h	/^  std::vector<std::tr1::shared_ptr<SgNode> > nodeStack_;$/;"	m	class:Picker
norm	cvec.h	/^inline T norm(const Cvec<T, n>& v) {$/;"	f
norm2	cvec.h	/^inline T norm2(const Cvec<T, n>& v) {$/;"	f
norm2	matrix4.h	/^inline double norm2(const Matrix4& m) {$/;"	f
norm2	quat.h	/^inline double norm2(const Quat& q) {$/;"	f
normal	geometrymaker.h	/^  Cvec3f normal;$/;"	m	struct:GenericVertex
normalMatrix	matrix4.h	/^inline Matrix4 normalMatrix(const Matrix4& m) {$/;"	f
normalize	cvec.h	/^  Cvec& normalize() {$/;"	f	class:Cvec
normalize	cvec.h	/^inline Cvec<T, n> normalize(const Cvec<T,n>& v) {$/;"	f
normalize	quat.h	/^inline Quat normalize(const Quat& q) {$/;"	f
operator !=	scenegraph.h	/^  bool operator != (const SgNode& other) const {$/;"	f	class:SgNode
operator ()	cvec.h	/^  T& operator () (const int i) {$/;"	f	class:Cvec
operator ()	cvec.h	/^  const T& operator () (const int i) const {$/;"	f	class:Cvec
operator ()	matrix4.h	/^  const double &operator () (const int row, const int col) const {$/;"	f	class:Matrix4
operator ()	matrix4.h	/^  double &operator () (const int row, const int col) {$/;"	f	class:Matrix4
operator ()	quat.h	/^  double operator () (const int i) const {$/;"	f	class:Quat
operator ()	quat.h	/^  double& operator () (const int i) {$/;"	f	class:Quat
operator *	cvec.h	/^  Cvec operator * (const T a) const {$/;"	f	class:Cvec
operator *	matrix4.h	/^  Cvec4 operator * (const Cvec4& v) const {$/;"	f	class:Matrix4
operator *	matrix4.h	/^  Matrix4 operator * (const Matrix4& m) const {$/;"	f	class:Matrix4
operator *	matrix4.h	/^  Matrix4 operator * (const double a) const {$/;"	f	class:Matrix4
operator *	quat.h	/^  Cvec4 operator * (const Cvec4& a) const {$/;"	f	class:Quat
operator *	quat.h	/^  Quat operator * (const Quat& a) const {$/;"	f	class:Quat
operator *	quat.h	/^  Quat operator * (const double a) const {$/;"	f	class:Quat
operator *	rigtform.h	/^  Cvec4 operator * (const Cvec4& a) const {$/;"	f	class:RigTForm
operator *	rigtform.h	/^  RigTForm operator * (const RigTForm& a) const {$/;"	f	class:RigTForm
operator *=	cvec.h	/^  Cvec& operator *= (const T a) {$/;"	f	class:Cvec
operator *=	matrix4.h	/^  Matrix4& operator *= (const Matrix4& a) {$/;"	f	class:Matrix4
operator *=	matrix4.h	/^  Matrix4& operator *= (const double a) {$/;"	f	class:Matrix4
operator *=	quat.h	/^  Quat& operator *= (const double a) {$/;"	f	class:Quat
operator +	cvec.h	/^  Cvec operator + (const Cvec& v) const {$/;"	f	class:Cvec
operator +	matrix4.h	/^  Matrix4 operator + (const Matrix4& a) const {$/;"	f	class:Matrix4
operator +	quat.h	/^  Quat operator + (const Quat& a) const {$/;"	f	class:Quat
operator +=	cvec.h	/^  Cvec& operator += (const Cvec& v) {$/;"	f	class:Cvec
operator +=	matrix4.h	/^  Matrix4& operator += (const Matrix4& m) {$/;"	f	class:Matrix4
operator +=	quat.h	/^  Quat& operator += (const Quat& a) {$/;"	f	class:Quat
operator -	cvec.h	/^  Cvec operator - () const {$/;"	f	class:Cvec
operator -	cvec.h	/^  Cvec operator - (const Cvec& v) const {$/;"	f	class:Cvec
operator -	matrix4.h	/^  Matrix4 operator - (const Matrix4& a) const {$/;"	f	class:Matrix4
operator -	quat.h	/^  Quat operator - (const Quat& a) const {$/;"	f	class:Quat
operator -=	cvec.h	/^  Cvec& operator -= (const Cvec& v) {$/;"	f	class:Cvec
operator -=	matrix4.h	/^  Matrix4& operator -= (const Matrix4& m) {$/;"	f	class:Matrix4
operator -=	quat.h	/^  Quat& operator -= (const Quat& a) {$/;"	f	class:Quat
operator /	cvec.h	/^  Cvec operator \/ (const T a) const {$/;"	f	class:Cvec
operator /	quat.h	/^  Quat operator \/ (const double a) const {$/;"	f	class:Quat
operator /=	cvec.h	/^  Cvec& operator \/= (const T a) {$/;"	f	class:Cvec
operator /=	quat.h	/^  Quat& operator \/= (const double a) {$/;"	f	class:Quat
operator =	asst4.cpp	/^  VertexPN& operator = (const GenericVertex& v) {$/;"	f	struct:VertexPN
operator ==	scenegraph.h	/^  bool operator == (const SgNode& other) const {$/;"	f	class:SgNode
operator GLuint	glsupport.h	/^  operator GLuint () const {$/;"	f	class:GlTexture
operator GLuint	glsupport.h	/^  operator GLuint() const {$/;"	f	class:GlBufferObject
operator GLuint	glsupport.h	/^  operator GLuint() const {$/;"	f	class:GlProgram
operator GLuint	glsupport.h	/^  operator GLuint() const {$/;"	f	class:GlShader
operator []	cvec.h	/^  T& operator [] (const int i) {$/;"	f	class:Cvec
operator []	cvec.h	/^  const T& operator [] (const int i) const {$/;"	f	class:Cvec
operator []	matrix4.h	/^  const double& operator [] (const int i) const {$/;"	f	class:Matrix4
operator []	matrix4.h	/^  double& operator [] (const int i) {$/;"	f	class:Matrix4
operator []	quat.h	/^  double operator [] (const int i) const {$/;"	f	class:Quat
operator []	quat.h	/^  double& operator [] (const int i) {$/;"	f	class:Quat
p	asst4.cpp	/^  Cvec3f p, n;$/;"	m	struct:VertexPN	file:
pick	asst4-snippets.cpp	/^static void pick() {$/;"	f	file:
pos	geometrymaker.h	/^  Cvec3f pos;$/;"	m	struct:GenericVertex
postVisit	drawer.h	/^  virtual bool postVisit(SgShapeNode& shapeNode) {$/;"	f	class:Drawer
postVisit	drawer.h	/^  virtual bool postVisit(SgTransformNode& node) {$/;"	f	class:Drawer
postVisit	picker.cpp	/^bool Picker::postVisit(SgShapeNode& node) {$/;"	f	class:Picker
postVisit	picker.cpp	/^bool Picker::postVisit(SgTransformNode& node) {$/;"	f	class:Picker
postVisit	scenegraph.cpp	/^  virtual bool postVisit(SgTransformNode& node) {$/;"	f	class:RbtAccumVisitor
postVisit	scenegraph.h	/^  virtual bool postVisit(SgShapeNode& node) { return true; }$/;"	f	class:SgNodeVisitor
postVisit	scenegraph.h	/^  virtual bool postVisit(SgTransformNode& node) { return true; }$/;"	f	class:SgNodeVisitor
ppmRead	ppm.cpp	/^void ppmRead(const char *filename, int& width, int& height, std::vector<PackedPixel>& pixels) {$/;"	f
ppmReadHeader	ppm.cpp	/^static void ppmReadHeader(istream& is, int &width, int &height) {$/;"	f	file:
ppmReadInteger	ppm.cpp	/^static int ppmReadInteger(istream& is) {$/;"	f	file:
printInfoLog	glsupport.cpp	/^static void printInfoLog(GLuint obj, const string& filename) {$/;"	f	file:
program	asst4.cpp	/^  GlProgram program;$/;"	m	struct:ShaderState	file:
program	asstcommon.h	/^  GlProgram program;$/;"	m	struct:ShaderState
q_	quat.h	/^  Cvec4 q_;  \/\/ layout is: q_[0]==w, q_[1]==x, q_[2]==y, q_[3]==z$/;"	m	class:Quat
quatToMatrix	quat.h	/^inline Matrix4 quatToMatrix(const Quat& q) {$/;"	f
r	ppm.h	/^  unsigned char r,g,b;$/;"	m	struct:PackedPixel
r_	rigtform.h	/^  Quat r_;  \/\/ rotation component represented as a quaternion$/;"	m	class:RigTForm
rbtStack_	drawer.h	/^  std::vector<RigTForm> rbtStack_;$/;"	m	class:Drawer
rbtStack_	scenegraph.cpp	/^  vector<RigTForm> rbtStack_;$/;"	m	class:RbtAccumVisitor	file:
rbt_	scenegraph.h	/^  RigTForm rbt_;$/;"	m	class:SgRbtNode
readAndCompileShader	glsupport.cpp	/^void readAndCompileShader(GLuint programHandle, const char * vertexShaderFileName, const char * fragmentShaderFileName) {$/;"	f
readAndCompileShaderFromMemory	glsupport.cpp	/^void readAndCompileShaderFromMemory(GLuint programHandle,$/;"	f
readAndCompileSingleShader	glsupport.cpp	/^void readAndCompileSingleShader(GLuint shaderHandle, const char *fn) {$/;"	f
readAndCompileSingleShaderFromMemory	glsupport.cpp	/^void readAndCompileSingleShaderFromMemory(GLuint shaderHandle,$/;"	f
readFromColumnMajorMatrix	matrix4.h	/^  Matrix4& readFromColumnMajorMatrix(const T m[]) {$/;"	f	class:Matrix4
readTextFile	glsupport.cpp	/^static void readTextFile(const char *fn, vector<char>& data) {$/;"	f	file:
removeChild	scenegraph.cpp	/^void SgTransformNode::removeChild(shared_ptr<SgNode> child) {$/;"	f	class:SgTransformNode
reshape	asst4.cpp	/^static void reshape(const int w, const int h) {$/;"	f	file:
rigTFormToMatrix	rigtform.h	/^inline Matrix4 rigTFormToMatrix(const RigTForm& tform) {$/;"	f
safe_glDisableVertexAttribArray	glsupport.h	/^inline void safe_glDisableVertexAttribArray(const GLint handle) {$/;"	f
safe_glEnableVertexAttribArray	glsupport.h	/^inline void safe_glEnableVertexAttribArray(const GLint handle) {$/;"	f
safe_glGetAttribLocation	glsupport.h	/^inline GLint safe_glGetAttribLocation(const GLuint program, const char varname[]) {$/;"	f
safe_glGetUniformLocation	glsupport.h	/^inline GLint safe_glGetUniformLocation(const GLuint program, const char varname[]) {$/;"	f
safe_glUniform1f	glsupport.h	/^inline void safe_glUniform1f(const GLint handle, const GLfloat a) {$/;"	f
safe_glUniform1i	glsupport.h	/^inline void safe_glUniform1i(const GLint handle, const GLint a) {$/;"	f
safe_glUniform2f	glsupport.h	/^inline void safe_glUniform2f(const GLint handle, const GLfloat a, const GLfloat b) {$/;"	f
safe_glUniform2i	glsupport.h	/^inline void safe_glUniform2i(const GLint handle, const GLint a, const GLint b) {$/;"	f
safe_glUniform3f	glsupport.h	/^inline void safe_glUniform3f(const GLint handle, const GLfloat a, const GLfloat b, const GLfloat c) {$/;"	f
safe_glUniform3i	glsupport.h	/^inline void safe_glUniform3i(const GLint handle, const GLint a, const GLint b, const GLint c) {$/;"	f
safe_glUniform4f	glsupport.h	/^inline void safe_glUniform4f(const GLint handle, const GLfloat a, const GLfloat b, const GLfloat c, const GLfloat d) {$/;"	f
safe_glUniform4i	glsupport.h	/^inline void safe_glUniform4i(const GLint handle, const GLint a, const GLint b, const GLint c, const GLint d) {$/;"	f
safe_glUniformMatrix4fv	glsupport.h	/^inline void safe_glUniformMatrix4fv(const GLint handle, const GLfloat data[]) {$/;"	f
safe_glVertexAttrib1f	glsupport.h	/^inline void safe_glVertexAttrib1f(const GLint handle, const GLfloat a) {$/;"	f
safe_glVertexAttrib2f	glsupport.h	/^inline void safe_glVertexAttrib2f(const GLint handle, const GLfloat a, const GLfloat b) {$/;"	f
safe_glVertexAttrib3f	glsupport.h	/^inline void safe_glVertexAttrib3f(const GLint handle, const GLfloat a, const GLfloat b, const GLfloat c) {$/;"	f
safe_glVertexAttrib4Nub	glsupport.h	/^inline void safe_glVertexAttrib4Nub(const GLint handle, const GLubyte a, const GLubyte b, const GLubyte c, const GLubyte d) {$/;"	f
safe_glVertexAttrib4f	glsupport.h	/^inline void safe_glVertexAttrib4f(const GLint handle, const GLfloat a, const GLfloat b, const GLfloat c, const GLfloat d) {$/;"	f
safe_glVertexAttribPointer	glsupport.h	/^inline void safe_glVertexAttribPointer(const GLint handle, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) {$/;"	f
sendModelViewNormalMatrix	asst4.cpp	/^static void sendModelViewNormalMatrix(const ShaderState& curSS, const Matrix4& MVM, const Matrix4& NMVM) {$/;"	f	file:
sendModelViewNormalMatrix	asstcommon.h	/^inline void sendModelViewNormalMatrix(const ShaderState& curSS, const Matrix4& MVM, const Matrix4& NMVM) {$/;"	f
sendProjectionMatrix	asst4.cpp	/^static void sendProjectionMatrix(const ShaderState& curSS, const Matrix4& projMatrix) {$/;"	f	file:
setRbt	scenegraph.h	/^  void setRbt(const RigTForm& rbt) {$/;"	f	class:SgRbtNode
setRotation	rigtform.h	/^  RigTForm& setRotation(const Quat& r) {$/;"	f	class:RigTForm
setTranslation	rigtform.h	/^  RigTForm& setTranslation(const Cvec3& t) {$/;"	f	class:RigTForm
srgbFrameBuffer_	picker.h	/^  bool srgbFrameBuffer_;$/;"	m	class:Picker
t_	rigtform.h	/^  Cvec3 t_; \/\/ translation component$/;"	m	class:RigTForm
tangent	geometrymaker.h	/^  Cvec3f tangent, binormal;$/;"	m	struct:GenericVertex
target_	scenegraph.cpp	/^  SgTransformNode& target_;$/;"	m	class:RbtAccumVisitor	file:
tex	geometrymaker.h	/^  Cvec2f tex;$/;"	m	struct:GenericVertex
transFact	matrix4.h	/^inline Matrix4 transFact(const Matrix4& m) {$/;"	f
transFact	rigtform.h	/^inline RigTForm transFact(const RigTForm& tform) {$/;"	f
transpose	matrix4.h	/^inline Matrix4 transpose(const Matrix4& m) {$/;"	f
updateFrustFovY	asst4.cpp	/^static void updateFrustFovY() {$/;"	f	file:
vbo	asst4.cpp	/^  GlBufferObject vbo, ibo;$/;"	m	struct:Geometry	file:
vboLen	asst4.cpp	/^  int vboLen, iboLen;$/;"	m	struct:Geometry	file:
visit	drawer.h	/^  virtual bool visit(SgShapeNode& shapeNode) {$/;"	f	class:Drawer
visit	drawer.h	/^  virtual bool visit(SgTransformNode& node) {$/;"	f	class:Drawer
visit	picker.cpp	/^bool Picker::visit(SgShapeNode& node) {$/;"	f	class:Picker
visit	picker.cpp	/^bool Picker::visit(SgTransformNode& node) {$/;"	f	class:Picker
visit	scenegraph.cpp	/^  virtual bool visit(SgTransformNode& node) {$/;"	f	class:RbtAccumVisitor
visit	scenegraph.h	/^  virtual bool visit(SgShapeNode& node) { return true; }$/;"	f	class:SgNodeVisitor
visit	scenegraph.h	/^  virtual bool visit(SgTransformNode& node) { return true; }$/;"	f	class:SgNodeVisitor
writePpmScreenshot	ppm.cpp	/^void writePpmScreenshot(const int width, const int height, const char *filename) {$/;"	f
writeToColumnMajorMatrix	matrix4.h	/^  void writeToColumnMajorMatrix(T m[]) const {$/;"	f	class:Matrix4
~GlBufferObject	glsupport.h	/^  ~GlBufferObject() {$/;"	f	class:GlBufferObject
~GlProgram	glsupport.h	/^  ~GlProgram() {$/;"	f	class:GlProgram
~GlShader	glsupport.h	/^  ~GlShader() {$/;"	f	class:GlShader
~GlTexture	glsupport.h	/^  ~GlTexture() {$/;"	f	class:GlTexture
~Noncopyable	glsupport.h	/^  ~Noncopyable() {}$/;"	f	class:Noncopyable
~SgNode	scenegraph.h	/^  virtual ~SgNode() {}$/;"	f	class:SgNode
